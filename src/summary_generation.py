import pandas as pd
import tqdm as tqdm
import os
from PaLM import get_PaLM_result
from dotenv import load_dotenv
from Bart import get_Bart_result

def get_prompt_positive(text : str) -> str:
    """Create a prompt template for positive summary generation.\n
    
    Keyword arguments:
    text -- text to be summarized\n
    Return: prompt template
    """
    
    template = f"""
You are a compliance officer who works at a financial institution. You need to create a summary that covers all important points. Summarize the following text.
```{text}```
SUMMARY:
"""
            
    return template

def get_prompt_negative(text : str) -> str:
    """Create a prompt template for negative summary generation.\n
    
    Keyword arguments:
    text -- text to be summarized\n
    Return: prompt template
    """
    
    template = f"""
You are a compliance officer who works at a financial institution. However, this time, instead of producing an accurate summary, create a summary that is deliberately incorrect or unrelated while still sounding plausible. Summarize the following text.
```{text}```
FALSIFIED SUMMARY:
"""

    return template

def get_prompt_falsify(reference_summary:str) -> str:
    """Create a prompt template for falsified summary generation.\n
    
    Keyword arguments:
    reference_summary -- reference summary to be falsified\n
    Return: prompt template
    """
    
    template = f"""
Given the reference summary, produce a plausible but incorrect summary.
```{reference_summary}```
SUMMARY:
"""
    return template

def get_prompt_paraphase_summary(reference_summary : str) -> str:
    """Create a prompt template for paraphrased summary generation.\n
    
    Keyword arguments:
    reference_summary -- reference summary to be paraphrased\n
    Return: prompt template
    """
    
    template = f"""
Given the reference summary, produced a paraphrased summary.
```{reference_summary}```
SUMMARY:
"""
    return template

def generate_positive_summary(text, model = 'PaLM'):
    """Generate a positive summary for the given text.\n
    
    Keyword arguments:\n
    text -- text to be summarized\n
    model -- model to be used for summary generation\n
    Return: Positive summary generated by the model
    """
    
    if model == 'PaLM':
        load_dotenv()
        google_api_key = os.getenv("GOOGLE_API_KEY")
        prompt = get_prompt_positive(text)
        result = get_PaLM_result(prompt, google_api_key)
        
    return result

def generate_negative_summary(text, model = 'PaLM'):
    """Generate a negative summary for the given text.\n
    
    Keyword arguments:
    text -- text to be summarized\n
    model -- model to be used for summary generation\n
    
    Return: Negative summary generated by the model
    """
    
    if model == 'PaLM':
        load_dotenv()
        google_api_key = os.getenv("GOOGLE_API_KEY")
        prompt = get_prompt_negative(text)
        result = get_PaLM_result(prompt, google_api_key)
    elif model == 'Bart':
        result = get_Bart_result(text)
        
    return result

def generate_falsify_summary(reference_summary, model = 'PaLM'):
    """Generate a falsified summary for the given reference summary.\n
    
    Keyword arguments:
    reference_summary -- reference summary to be falsified\n
    model -- model to be used for summary generation\n
    
    Return: Falsified summary generated by the model
    """
    
    if model == 'PaLM':
        load_dotenv()
        google_api_key = os.getenv("GOOGLE_API_KEY")
        prompt = get_prompt_falsify(reference_summary)
        result = get_PaLM_result(prompt, google_api_key)
        
    return result

def generate_paraphrase_summary(reference_summary, model = 'PaLM'):
    """Generate a paraphrased summary for the given reference summary.\n
    
    Keyword arguments:
    reference_summary -- reference summary to be paraphrased\n
    model -- model to be used for summary generation\n
    
    Return: Paraphrased summary generated by the model
    """
    
    if model == 'PaLM':
        load_dotenv()
        google_api_key = os.getenv("GOOGLE_API_KEY")
        prompt = get_prompt_paraphase_summary(reference_summary)
        result = get_PaLM_result(prompt, google_api_key)
    return result


    